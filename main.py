from flask import Flask, render_template
import re
import math

app = Flask(__name__)

@app.route('/')
def index():
    data = {'message': 'Hello from Flask!'}
    return render_template('index.html', data=data)

if __name__ == '__main__':
    app.run(debug=True)
'''
#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ IP –Ω–∞ —Ü–∏—Ñ—Ä–∏ —ñ —Ç–æ—á–∫–∏
def validate_ip_address(ip):
    ip_pattern = re.compile(r'^(\d{1,3}\.){3}\d{1,3}$')

    if ip_pattern.match(ip):
        print("IP-–∞–¥—Ä–µ—Å–∞ –≤–∞–ª—ñ–¥–Ω–∞.")
    else:
        print("IP-–∞–¥—Ä–µ—Å–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.")
'''


#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª–∞—Å–∏ IP
def get_ip_class(ip):
    ip_pattern = re.compile(r'^(\d{1,3})\.')
    first_octet = int(ip_pattern.search(ip).group(1))

    if 1 <= first_octet <= 127:
        return 'A'
    elif 128 <= first_octet <= 191:
        return 'B'
    elif 192 <= first_octet <= 223:
        return 'C'
    elif 224 <= first_octet <= 239:
        return 'D'
    elif 240 <= first_octet <= 255:
        return 'E'
    else:
        return '-'

#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–æ—Å—Ç–∞ –∫–ª–∞—Å–∏ C
def validate_host(host_count):
    if host_count <= 0:
        print("–ù–µ –≤—ñ—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ—Å—Ç—ñ–≤")
        return False
    else:
        return True

#–û–±—á–∏—Å–ª–µ–Ω–Ω—è –Ω–∞–π–±–ª–∏–∂—á–æ—ó –±—ñ–ª—à–æ—ó —Å—Ç–µ–ø–µ–Ω—ñ
def find_power_of_two(host_count):
    if host_count > 0:
        power = math.ceil(math.log2(host_count + 2)) #–î–æ–±–æ–≤–ª—è–µ–º 2 –Ω–∞ Network i Rozg≈Çoszeniowy
        return power
    else:
        return "–í–≤–µ–¥–µ–Ω–µ —á–∏—Å–ª–æ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0."


#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–æ—Å—Ç–∞ –∫–ª–∞—Å–∏ C
def validate_host_C(host_count):
    if host_count > 254:
        print("–ù–µ –≤—ñ—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ—Å—Ç—ñ–≤ –¥–ª—è ip –∫–ª–∞—Å–∏ C")
        return False
    else:
        return True


#–®—É–∫–∞–∂–º–æ –∫–ª–∞—Å—É –°
# –ü–æ–∏—Å–∫ –¥–ª—è –∫–ª–∞—Å—Å–∞ C
def find_c(ip, pow2):
    ip_pattern = re.compile(r'^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$')
    match = ip_pattern.match(ip)
    last_number_ip = int(match.group(4))

    licznik_podsieci = 0
    last_subnet_printed = False

    first_three_octets = f"{match.group(1)}.{match.group(2)}.{match.group(3)}"

    while last_number_ip < 256:
        licznik_podsieci += 1

        N = last_number_ip
        H1 = N + 1

        last_number_ip = last_number_ip + pow2

        H_ost = last_number_ip - 2
        R = last_number_ip - 1

        if last_number_ip >= 256:
            if not last_subnet_printed:
                print(f"‚ùó ost. {licznik_podsieci}p:")
                last_subnet_printed = True
                #Maska
                maska_koncowa = f"{N}"
            print(f"ost. N: {first_three_octets}.{N}; 1H: {first_three_octets}.{H1}; ostH: {first_three_octets}.{H_ost}; R: {first_three_octets}.{R};")
            print(f"üé≠ –ú–∞—Å–∫–∞ - 255.255.255.{maska_koncowa}")
        elif licznik_podsieci == 1 or licznik_podsieci == 2 or licznik_podsieci == 3:
            print(f"{licznik_podsieci}p:")
            print(f"N: {first_three_octets}.{N}; 1H: {first_three_octets}.{H1}; ostH: {first_three_octets}.{H_ost}; R: {first_three_octets}.{R};")


#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–æ—Å—Ç–∞ –∫–ª–∞—Å–∏ B
def validate_host_B(host_count):
    if host_count > 65534:
        print("–ù–µ –≤—ñ—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ—Å—Ç—ñ–≤ –¥–ª—è ip –∫–ª–∞—Å–∏ B")
        return False
    else:
        return True


#–®—É–∫–∞–∂–º–æ –∫–ª–∞—Å—É B
# –ü–æ–∏—Å–∫ –¥–ª—è –∫–ª–∞—Å—Å–∞ B
def find_B(ip, pow2):
    ip_pattern = re.compile(r'^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$')
    match = ip_pattern.match(ip)

    last_number_ip = int(match.group(4))
    thrid_number_ip = int(match.group(3))

    licznik_podsieci = 0
    last_subnet_printed = False

    first_two_octets = f"{match.group(1)}.{match.group(2)}"

    while thrid_number_ip < 256:
        licznik_podsieci += 1

        cN = last_number_ip
        cH1 = cN + 1

        #bN_first - —Ç—Ä–µ—Ç—è —Ü–∏—Ñ—Ä–∞ –¥–æ –æ–±—á–∏—Å–ª–µ–Ω—å
        bN_first = thrid_number_ip

        #–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å—Ç–µ–ø—ñ–Ω—å –±—ñ–ª—å—à–∞ 256 –±–æ —ñ–Ω–∞–∫—à–µ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ü–∏—Ñ—Ä–∏ –¥–æ–¥–∞—Å—Ç—å 512 —á–∏ 1024 ...  - (–≤–æ–Ω–∞ –≤–∏–π–¥–µ –∑–∞ –º–µ–∂—ñ 255)
        if pow2 >= 256:
            step = pow2/256
            thrid_number_ip += int(step)
            last_number_ip = last_number_ip + 256

        else:
            last_number_ip = last_number_ip + pow2


        #bN_last - —Ç—Ä–µ—Ç—è —Ü–∏—Ñ—Ä–∞ –ø—ñ—Å–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å
        if last_number_ip >= 255 and thrid_number_ip > bN_first:
            bN_last = thrid_number_ip-1 #–º–∏ –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ 1 –±–æ –±–µ–∑ —Ü—å–æ–≥–æ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ –ø–æ–∫–∞–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∏–ø—É  1p ... R: 3.255; 2p N: 3.0; ....
        else:                           #—á–µ—Ä–µ–∑ —Ç–µ —â–æ –º–∏ –≤—ñ–¥–Ω—è–ª–∏ 1 –±—É–¥–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–æ–±—Ç–æ  1p ... R: 2.255; 2p N: 3.0; ....
            bN_last = thrid_number_ip

        cH_ost = last_number_ip - 2
        cR = last_number_ip - 1

    #–í—ã–≤–æ–∂—É –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ –ø–æ–¥—Å–µ—Ç–∏ + –ø–æ—Å–ª–µ–¥–Ω–∏–π –û–¢–î–ï–õ–¨–ù–û —Å —ç–º–æ–¥–∑–∏
        if last_number_ip >= 255 and thrid_number_ip >= 255:
            if not last_subnet_printed:
                print(f"‚ùó ost. {licznik_podsieci}p:")
                #Maska
                maska_koncowa = f"{bN_first}.{cN}"
                last_subnet_printed = True
            print(f"N: {first_two_octets}.{bN_first}.{cN}; 1H: {first_two_octets}.{bN_first}.{cH1}; ostH: {first_two_octets}.{bN_last}.{cH_ost}; R: {first_two_octets}.{bN_last}.{cR};")
            print(f"üé≠ –ú–∞—Å–∫–∞ - 255.255.{maska_koncowa}")


        elif licznik_podsieci == 1 or licznik_podsieci == 2 or licznik_podsieci == 3:
            print(f"{licznik_podsieci}p:")
            print(f"N: {first_two_octets}.{bN_first}.{cN}; 1H: {first_two_octets}.{bN_first}.{cH1}; ostH: {first_two_octets}.{bN_last}.{cH_ost}; R: {first_two_octets}.{bN_last}.{cR};")



        #–æ–±–Ω—É–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ü–∏—Ñ—Ä—É ip
        if pow2 >= 256:
            last_number_ip = 0

        if last_number_ip >= 256:
            last_number_ip = 0
            thrid_number_ip += 1




#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–æ—Å—Ç–∞ –∫–ª–∞—Å–∏ A
def validate_host_A(host_count):
    if host_count > 16777214:
        print("–ù–µ –≤—ñ—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ—Å—Ç—ñ–≤ –¥–ª—è ip –∫–ª–∞—Å–∏ A")
        return False
    else:
        return True



#–®—É–∫–∞–∂–º–æ –∫–ª–∞—Å—É A
# –ü–æ–∏—Å–∫ –¥–ª—è –∫–ª–∞—Å—Å–∞ A
def find_A(ip, pow2):
    ip_pattern = re.compile(r'^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$')
    match = ip_pattern.match(ip)

    last_number_ip = int(match.group(4))
    thrid_number_ip = int(match.group(3))
    second_number_ip = int(match.group(2))

    licznik_podsieci = 0
    last_subnet_printed = False

    first_octet = f"{match.group(1)}"

    while second_number_ip < 256:
        licznik_podsieci += 1

        cN = last_number_ip
        cH1 = cN + 1

        #bN_first - —Ç—Ä–µ—Ç—è —Ü–∏—Ñ—Ä–∞ –¥–æ –æ–±—á–∏—Å–ª–µ–Ω—å
        bN_first = thrid_number_ip

        #aN_first - –¥—Ä—É–≥–∞ —Ü–∏—Ñ—Ä–∞ ip –¥–æ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è
        aN_first = second_number_ip


        if pow2 >= 65536:
            step_a = pow2 / 65536
            second_number_ip +=int(step_a)
            thrid_number_ip = thrid_number_ip + 256
            last_number_ip = last_number_ip + 256

        elif pow2 >= 256 and pow2 < 65536:
            step_b = pow2 / 256
            thrid_number_ip += int(step_b)
            last_number_ip = last_number_ip + 256
        elif pow2 < 256:
            last_number_ip = last_number_ip + pow2

        # aN_last - –¥—Ä—É–≥–∞ —Ü–∏—Ñ—Ä–∞ –ø—ñ—Å–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å
        if thrid_number_ip >= 255 and second_number_ip > aN_first:
            aN_last = second_number_ip-1
        else:
            aN_last = second_number_ip


        #bN_last - —Ç—Ä–µ—Ç—è —Ü–∏—Ñ—Ä–∞ –ø—ñ—Å–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å
        if last_number_ip >= 255 and thrid_number_ip > bN_first:
            bN_last = thrid_number_ip-1
        else:
            bN_last = thrid_number_ip



        cH_ost = last_number_ip - 2
        cR = last_number_ip - 1

    #–í—ã–≤–æ–∂—É –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ –ø–æ–¥—Å–µ—Ç–∏ + –ø–æ—Å–ª–µ–¥–Ω–∏–π –û–¢–î–ï–õ–¨–ù–û —Å —ç–º–æ–¥–∑–∏
        if last_number_ip >= 255 and thrid_number_ip >= 255 and second_number_ip >= 255:
            if not last_subnet_printed:
                print(f"‚ùó ost. {licznik_podsieci}p:")
                #Maska
                maska_koncowa = f"{aN_first}.{bN_first}.{cN}"
                last_subnet_printed = True

            print(f"N: {first_octet}.{aN_first}.{bN_first}.{cN}; 1H: {first_octet}.{aN_first}.{bN_first}.{cH1}; ostH: {first_octet}.{aN_last}.{bN_last}.{cH_ost}; R: {first_octet}.{aN_last}.{bN_last}.{cR};")
            print(f"üé≠ –ú–∞—Å–∫–∞ - 255.{maska_koncowa}")


        elif licznik_podsieci == 1 or licznik_podsieci == 2 or licznik_podsieci == 3:
            print(f"{licznik_podsieci}p:")
            print(f"N: {first_octet}.{aN_first}.{bN_first}.{cN}; 1H: {first_octet}.{aN_first}.{bN_first}.{cH1}; ostH: {first_octet}.{aN_last}.{bN_last}.{cH_ost}; R: {first_octet}.{aN_last}.{bN_last}.{cR};")



        #–æ–±–Ω—É–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ü–∏—Ñ—Ä—É ip
        if pow2 >= 256 and pow2 < 65536:
            last_number_ip = 0

        if pow2 >= 65536:
            thrid_number_ip = 0
            last_number_ip = 0

        if last_number_ip >= 256:
            last_number_ip = 0
            thrid_number_ip += 1

        if thrid_number_ip >= 256:
            last_number_ip = 0
            thrid_number_ip = 0
            second_number_ip += 1
'''
–¶–µ –Ω–∞ –º–æ—é –¥—É–º–∫—É –±—É–¥–µ –ª–∏—à–Ω—î –±–æ –º–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Ip –≤ get_ip_class   
validate_ip_address(ip_address)
'''

#–ü—Ä–∏–π–º–∞—î–º–æ ip
ip_address = input("–í–≤–µ–¥—ñ—Ç—å IP-–∞–¥—Ä–µ—Å—É: ")

#–ü—Ä–∏–π–º–∞—î–º–æ host
try:
    host_count = int(input("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ—Å—Ç—ñ–≤/–ø–æ–¥—Å–µ—Ç—ñ–≤: "))
except ValueError:
    print("–í–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ —î —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º.")


#–°—Ç–µ–ø—ñ–Ω—å 2
var = True  #–≤–∞—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
var = validate_host(host_count)
if var == True:
    power_of_two = find_power_of_two(host_count)

print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ—Å—Ç—ñ–≤ –ø–æ–º—ñ—â–∞—î—Ç—å—Å—è –≤ 2^{power_of_two} = {2**power_of_two}")


#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ip —Ç–∞ –≤–∏–±—ñ—Ä –∫–ª–∞—Å–∏
ip_class = get_ip_class(ip_address)
print(f"\nIP-–∞–¥—Ä–µ—Å–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –∫–ª–∞—Å–∏ {ip_class}")


# –ü–æ–¥—Å–µ—Ç—ñ (—Ç–µ—Å—Ç) -----------------------------------------
new_pow = 0
dec = int(input("1 - —Ö–æ—Å—Ç–∏  2 - –ø–æ–¥—Å–µ—Ç—ñ "))
if dec == 2:
    if ip_class == 'C':
        new_pow = 8 - power_of_two
    elif ip_class == 'B':
        new_pow = 16 - power_of_two
    elif ip_class == 'A':
        new_pow = 24 - power_of_two

    #–∑–Ω–∞–π—à–æ–≤ –±–∞–≥ –∫–æ–ª–∏ new_pow = 1 –∞–±–æ 0 —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–∞ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∞—Ü—é—î
    if new_pow == 1 or new_pow == 0:
        new_pow = 2

    power_of_two = new_pow

# -------------------------------------------------------

#–í–∏–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
if ip_class =='C':
    print("–ú–∞—Å–∫–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 255.255.255.0\n")
    #–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ
    var = validate_host_C(host_count)
    # –û–±—á–∏—Å–ª–∏—Ç–∏ –∫–ª–∞—Å—É –°
    if var == True:
        find_c(ip_address, 2**power_of_two)

elif ip_class == 'B':
    print("–ú–∞—Å–∫–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 255.255.0.0")
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ
    var = validate_host_B(host_count)
    # –û–±—á–∏—Å–ª–∏—Ç–∏ –∫–ª–∞—Å—É B
    if var == True:
        find_B(ip_address, 2 ** power_of_two)

elif ip_class == 'A':
    print("–ú–∞—Å–∫–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 255.0.0.0")
    #–ü–µ—Ä–µ–≤—ñ–ø—Ä—è—î–º–æ
    var = validate_host_A(host_count)
    # –û–±—á–∏—Å–ª–∏—Ç–∏ –∫–ª–∞—Å—É A
    if var == True:
        find_A(ip_address, 2 ** power_of_two)

elif ip_class == 'D':
    print("–î–∞–Ω–∏–π IP –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ—ó –∫–ª–∞—Å–∏ D")
elif ip_class == 'E':
    print("–î–∞–Ω–∏–π IP –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ—ó –∫–ª–∞—Å–∏ E")
else:
    print("–ù–µ –≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç IP")





#binary test
'''decimal_number = 7
binary_str = bin(decimal_number)
print(binary_str)'''